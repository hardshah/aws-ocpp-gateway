"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Expression = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Expression for events in Detector Model state.
 * @see https://docs.aws.amazon.com/iotevents/latest/developerguide/iotevents-expressions.html
 */
class Expression {
    /**
     * Create a expression from the given string.
     */
    static fromString(value) {
        return new StringExpression(value);
    }
    /**
     * Create a expression for function `currentInput()`.
     * It is evaluated to true if the specified input message was received.
     */
    static currentInput(input) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_IInput(input);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.currentInput);
            }
            throw error;
        }
        return this.fromString(`currentInput("${input.inputName}")`);
    }
    /**
     * Create a expression for function `timeout("timer-name")`.
     * It is evaluated to true if the specified timer has elapsed.
     * You can define a timer only using the `setTimer` action.
     */
    static timeout(timerName) {
        return this.fromString(`timeout("${timerName}")`);
    }
    /**
     * Create a expression for get an input attribute as `$input.TemperatureInput.temperatures[2]`.
     */
    static inputAttribute(input, path) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_IInput(input);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.inputAttribute);
            }
            throw error;
        }
        return this.fromString(`$input.${input.inputName}.${path}`);
    }
    /**
     * Create a expression for the Addition operator.
     */
    static add(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.add);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '+', right, 12);
    }
    /**
     * Create a expression for the Subtraction operator.
     */
    static subtract(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.subtract);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '-', right, 12);
    }
    /**
     * Create a expression for the Division operator.
     */
    static divide(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.divide);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '/', right, 13);
    }
    /**
     * Create a expression for the Multiplication operator.
     */
    static multiply(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.multiply);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '*', right, 13);
    }
    /**
     * Create a expression for the String Concatenation operator.
     */
    static concat(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.concat);
            }
            throw error;
        }
        return this.add(left, right);
    }
    /**
     * Create a expression for the Bitwise OR operator.
     */
    static bitwiseOr(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bitwiseOr);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '|', right, 6);
    }
    /**
     * Create a expression for the Bitwise AND operator.
     */
    static bitwiseAnd(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bitwiseAnd);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '&', right, 8);
    }
    /**
     * Create a expression for the Bitwise XOR operator.
     */
    static bitwiseXor(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.bitwiseXor);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '^', right, 7);
    }
    /**
     * Create a expression for the Equal operator.
     */
    static eq(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.eq);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '==', right, 9);
    }
    /**
     * Create a expression for the Not Equal operator.
     */
    static neq(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.neq);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '!=', right, 9);
    }
    /**
     * Create a expression for the Less Than operator.
     */
    static lt(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.lt);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '<', right, 10);
    }
    /**
     * Create a expression for the Less Than Or Equal operator.
     */
    static lte(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.lte);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '<=', right, 10);
    }
    /**
     * Create a expression for the Greater Than operator.
     */
    static gt(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.gt);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '>', right, 10);
    }
    /**
     * Create a expression for the Greater Than Or Equal operator.
     */
    static gte(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.gte);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '>=', right, 10);
    }
    /**
     * Create a expression for the AND operator.
     */
    static and(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.and);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '&&', right, 5);
    }
    /**
     * Create a expression for the OR operator.
     */
    static or(left, right) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(left);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_Expression(right);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.or);
            }
            throw error;
        }
        return new BinaryOperationExpression(left, '||', right, 4);
    }
    constructor() {
    }
}
exports.Expression = Expression;
_a = JSII_RTTI_SYMBOL_1;
Expression[_a] = { fqn: "@aws-cdk/aws-iotevents-alpha.Expression", version: "2.130.0-alpha.0" };
class StringExpression extends Expression {
    constructor(value) {
        super();
        this.value = value;
    }
    evaluate() {
        return this.value;
    }
}
class BinaryOperationExpression extends Expression {
    constructor(left, operator, right, 
    /**
     * Indicates the priority of the operator.
     * This is intended to be set according to MDN rules.
     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence#table
     */
    priority) {
        super();
        this.left = left;
        this.operator = operator;
        this.right = right;
        this.priority = priority;
    }
    evaluate(parentPriority) {
        const expression = `${this.left.evaluate(this.priority)} ${this.operator} ${this.right.evaluate(this.priority)}`;
        return parentPriority === undefined || parentPriority <= this.priority
            ? expression
            : `(${expression})`;
    }
}
//# sourceMappingURL=data:application/json;base64,