"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.State = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
/**
 * Defines a state of a detector.
 */
class State {
    constructor(props) {
        this.props = props;
        this.transitionEvents = [];
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_StateProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, State);
            }
            throw error;
        }
        this.stateName = props.stateName;
    }
    /**
     * Add a transition event to the state.
     * The transition event will be triggered if condition is evaluated to `true`.
     *
     * @param targetState the state that will be transit to when the event triggered
     * @param options transition options including the condition that causes the state transition
     */
    transitionTo(targetState, options) {
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_State(targetState);
            jsiiDeprecationWarnings._aws_cdk_aws_iotevents_alpha_TransitionOptions(options);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, this.transitionTo);
            }
            throw error;
        }
        const alreadyAdded = this.transitionEvents.some(transitionEvent => transitionEvent.nextState === targetState);
        if (alreadyAdded) {
            throw new Error(`State '${this.stateName}' already has a transition defined to '${targetState.stateName}'`);
        }
        this.transitionEvents.push({
            eventName: options.eventName ?? `${this.stateName}_to_${targetState.stateName}`,
            nextState: targetState,
            condition: options.when,
            actions: options.executing,
        });
    }
    /**
     * Collect states in dependency gragh that constructed by state transitions,
     * and return the JSONs of the states.
     * This function is called recursively and collect the states.
     *
     * @internal
     */
    _collectStateJsons(scope, actionBindOptions, collectedStates) {
        if (collectedStates.has(this)) {
            return [];
        }
        collectedStates.add(this);
        return [
            this.toStateJson(scope, actionBindOptions),
            ...this.transitionEvents.flatMap(transitionEvent => {
                return transitionEvent.nextState._collectStateJsons(scope, actionBindOptions, collectedStates);
            }),
        ];
    }
    /**
     * Returns true if this state has at least one condition via events.
     *
     * @internal
     */
    _onEnterEventsHaveAtLeastOneCondition() {
        return this.props.onEnter?.some(event => event.condition) ?? false;
    }
    toStateJson(scope, actionBindOptions) {
        const { onEnter, onInput, onExit } = this.props;
        return {
            stateName: this.stateName,
            onEnter: onEnter && {
                events: toEventsJson(scope, actionBindOptions, onEnter),
            },
            onInput: (onInput || this.transitionEvents.length !== 0) ? {
                events: toEventsJson(scope, actionBindOptions, onInput),
                transitionEvents: toTransitionEventsJson(scope, actionBindOptions, this.transitionEvents),
            } : undefined,
            onExit: onExit && {
                events: toEventsJson(scope, actionBindOptions, onExit),
            },
        };
    }
}
exports.State = State;
_a = JSII_RTTI_SYMBOL_1;
State[_a] = { fqn: "@aws-cdk/aws-iotevents-alpha.State", version: "2.130.0-alpha.0" };
function toEventsJson(scope, actionBindOptions, events) {
    return events?.map(event => ({
        eventName: event.eventName,
        condition: event.condition?.evaluate(),
        actions: event.actions?.map(action => action._bind(scope, actionBindOptions).configuration),
    }));
}
function toTransitionEventsJson(scope, actionBindOptions, transitionEvents) {
    if (transitionEvents.length === 0) {
        return undefined;
    }
    return transitionEvents.map(transitionEvent => ({
        eventName: transitionEvent.eventName,
        condition: transitionEvent.condition.evaluate(),
        actions: transitionEvent.actions?.map(action => action._bind(scope, actionBindOptions).configuration),
        nextState: transitionEvent.nextState.stateName,
    }));
}
//# sourceMappingURL=data:application/json;base64,