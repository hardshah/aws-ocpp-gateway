"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createBackupConfig = exports.createProcessingConfig = exports.createEncryptionConfig = exports.createBufferingHints = exports.createLoggingOptions = void 0;
const logs = require("aws-cdk-lib/aws-logs");
const s3 = require("aws-cdk-lib/aws-s3");
const constructs_1 = require("constructs");
function createLoggingOptions(scope, props) {
    if (props.logging === false && props.logGroup) {
        throw new Error('logging cannot be set to false when logGroup is provided');
    }
    if (props.logging !== false || props.logGroup) {
        const logGroup = props.logGroup ?? constructs_1.Node.of(scope).tryFindChild('LogGroup') ?? new logs.LogGroup(scope, 'LogGroup');
        const logGroupGrant = logGroup.grantWrite(props.role);
        return {
            loggingOptions: {
                enabled: true,
                logGroupName: logGroup.logGroupName,
                logStreamName: logGroup.addStream(props.streamId).logStreamName,
            },
            dependables: [logGroupGrant],
        };
    }
    return undefined;
}
exports.createLoggingOptions = createLoggingOptions;
function createBufferingHints(interval, size) {
    if (!interval && !size) {
        return undefined;
    }
    const intervalInSeconds = interval?.toSeconds() ?? 300;
    if (intervalInSeconds > 900) {
        throw new Error(`Buffering interval must be less than 900 seconds. Buffering interval provided was ${intervalInSeconds} seconds.`);
    }
    const sizeInMBs = size?.toMebibytes() ?? 5;
    if (sizeInMBs < 1 || sizeInMBs > 128) {
        throw new Error(`Buffering size must be between 1 and 128 MiBs. Buffering size provided was ${sizeInMBs} MiBs.`);
    }
    return { intervalInSeconds, sizeInMBs };
}
exports.createBufferingHints = createBufferingHints;
function createEncryptionConfig(role, encryptionKey) {
    encryptionKey?.grantEncryptDecrypt(role);
    return encryptionKey
        ? { kmsEncryptionConfig: { awskmsKeyArn: encryptionKey.keyArn } }
        : undefined;
}
exports.createEncryptionConfig = createEncryptionConfig;
function createProcessingConfig(scope, role, dataProcessor) {
    return dataProcessor
        ? {
            enabled: true,
            processors: [renderDataProcessor(dataProcessor, scope, role)],
        }
        : undefined;
}
exports.createProcessingConfig = createProcessingConfig;
function renderDataProcessor(processor, scope, role) {
    const processorConfig = processor.bind(scope, { role });
    const parameters = [{ parameterName: 'RoleArn', parameterValue: role.roleArn }];
    parameters.push(processorConfig.processorIdentifier);
    if (processor.props.bufferInterval) {
        parameters.push({ parameterName: 'BufferIntervalInSeconds', parameterValue: processor.props.bufferInterval.toSeconds().toString() });
    }
    if (processor.props.bufferSize) {
        parameters.push({ parameterName: 'BufferSizeInMBs', parameterValue: processor.props.bufferSize.toMebibytes().toString() });
    }
    if (processor.props.retries) {
        parameters.push({ parameterName: 'NumberOfRetries', parameterValue: processor.props.retries.toString() });
    }
    return {
        type: processorConfig.processorType,
        parameters,
    };
}
function createBackupConfig(scope, role, props) {
    if (!props || (props.mode === undefined && !props.bucket)) {
        return undefined;
    }
    const bucket = props.bucket ?? new s3.Bucket(scope, 'BackupBucket');
    const bucketGrant = bucket.grantReadWrite(role);
    const { loggingOptions, dependables: loggingDependables } = createLoggingOptions(scope, {
        logging: props.logging,
        logGroup: props.logGroup,
        role,
        streamId: 'S3Backup',
    }) ?? {};
    return {
        backupConfig: {
            bucketArn: bucket.bucketArn,
            roleArn: role.roleArn,
            prefix: props.dataOutputPrefix,
            errorOutputPrefix: props.errorOutputPrefix,
            bufferingHints: createBufferingHints(props.bufferingInterval, props.bufferingSize),
            compressionFormat: props.compression?.value,
            encryptionConfiguration: createEncryptionConfig(role, props.encryptionKey),
            cloudWatchLoggingOptions: loggingOptions,
        },
        dependables: [bucketGrant, ...(loggingDependables ?? [])],
    };
}
exports.createBackupConfig = createBackupConfig;
//# sourceMappingURL=data:application/json;base64,