"use strict";
var _a;
Object.defineProperty(exports, "__esModule", { value: true });
exports.S3Bucket = void 0;
const jsiiDeprecationWarnings = require("../.warnings.jsii.js");
const JSII_RTTI_SYMBOL_1 = Symbol.for("jsii.rtti");
const iam = require("aws-cdk-lib/aws-iam");
const common_1 = require("./common");
const helpers_1 = require("./private/helpers");
/**
 * An S3 bucket destination for data from a Kinesis Data Firehose delivery stream.
 */
class S3Bucket {
    constructor(bucket, props = {}) {
        this.bucket = bucket;
        this.props = props;
        try {
            jsiiDeprecationWarnings._aws_cdk_aws_kinesisfirehose_destinations_alpha_S3BucketProps(props);
        }
        catch (error) {
            if (process.env.JSII_DEBUG !== "1" && error.name === "DeprecationError") {
                Error.captureStackTrace(error, S3Bucket);
            }
            throw error;
        }
        if (this.props.s3Backup?.mode === common_1.BackupMode.FAILED) {
            throw new Error('S3 destinations do not support BackupMode.FAILED');
        }
    }
    bind(scope, _options) {
        const role = this.props.role ?? new iam.Role(scope, 'S3 Destination Role', {
            assumedBy: new iam.ServicePrincipal('firehose.amazonaws.com'),
        });
        const bucketGrant = this.bucket.grantReadWrite(role);
        const { loggingOptions, dependables: loggingDependables } = (0, helpers_1.createLoggingOptions)(scope, {
            logging: this.props.logging,
            logGroup: this.props.logGroup,
            role,
            streamId: 'S3Destination',
        }) ?? {};
        const { backupConfig, dependables: backupDependables } = (0, helpers_1.createBackupConfig)(scope, role, this.props.s3Backup) ?? {};
        return {
            extendedS3DestinationConfiguration: {
                cloudWatchLoggingOptions: loggingOptions,
                processingConfiguration: (0, helpers_1.createProcessingConfig)(scope, role, this.props.processor),
                roleArn: role.roleArn,
                s3BackupConfiguration: backupConfig,
                s3BackupMode: this.getS3BackupMode(),
                bufferingHints: (0, helpers_1.createBufferingHints)(this.props.bufferingInterval, this.props.bufferingSize),
                bucketArn: this.bucket.bucketArn,
                compressionFormat: this.props.compression?.value,
                encryptionConfiguration: (0, helpers_1.createEncryptionConfig)(role, this.props.encryptionKey),
                errorOutputPrefix: this.props.errorOutputPrefix,
                prefix: this.props.dataOutputPrefix,
            },
            dependables: [bucketGrant, ...(loggingDependables ?? []), ...(backupDependables ?? [])],
        };
    }
    getS3BackupMode() {
        return this.props.s3Backup?.bucket || this.props.s3Backup?.mode === common_1.BackupMode.ALL
            ? 'Enabled'
            : undefined;
    }
}
exports.S3Bucket = S3Bucket;
_a = JSII_RTTI_SYMBOL_1;
S3Bucket[_a] = { fqn: "@aws-cdk/aws-kinesisfirehose-destinations-alpha.S3Bucket", version: "2.130.0-alpha.0" };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiczMtYnVja2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiczMtYnVja2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDJDQUEyQztBQUkzQyxxQ0FBd0Y7QUFDeEYsK0NBQW1KO0FBUW5KOztHQUVHO0FBQ0gsTUFBYSxRQUFRO0lBQ25CLFlBQTZCLE1BQWtCLEVBQW1CLFFBQXVCLEVBQUU7UUFBOUQsV0FBTSxHQUFOLE1BQU0sQ0FBWTtRQUFtQixVQUFLLEdBQUwsS0FBSyxDQUFvQjs7Ozs7OytDQURoRixRQUFROzs7O1FBRWpCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsSUFBSSxLQUFLLG1CQUFVLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDcEQsTUFBTSxJQUFJLEtBQUssQ0FBQyxrREFBa0QsQ0FBQyxDQUFDO1FBQ3RFLENBQUM7S0FDRjtJQUVELElBQUksQ0FBQyxLQUFnQixFQUFFLFFBQXlDO1FBQzlELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUscUJBQXFCLEVBQUU7WUFDekUsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDO1NBQzlELENBQUMsQ0FBQztRQUVILE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXJELE1BQU0sRUFBRSxjQUFjLEVBQUUsV0FBVyxFQUFFLGtCQUFrQixFQUFFLEdBQUcsSUFBQSw4QkFBb0IsRUFBQyxLQUFLLEVBQUU7WUFDdEYsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTztZQUMzQixRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRO1lBQzdCLElBQUk7WUFDSixRQUFRLEVBQUUsZUFBZTtTQUMxQixDQUFDLElBQUksRUFBRSxDQUFDO1FBRVQsTUFBTSxFQUFFLFlBQVksRUFBRSxXQUFXLEVBQUUsaUJBQWlCLEVBQUUsR0FBRyxJQUFBLDRCQUFrQixFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDcEgsT0FBTztZQUNMLGtDQUFrQyxFQUFFO2dCQUNsQyx3QkFBd0IsRUFBRSxjQUFjO2dCQUN4Qyx1QkFBdUIsRUFBRSxJQUFBLGdDQUFzQixFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUM7Z0JBQ2xGLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTztnQkFDckIscUJBQXFCLEVBQUUsWUFBWTtnQkFDbkMsWUFBWSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUU7Z0JBQ3BDLGNBQWMsRUFBRSxJQUFBLDhCQUFvQixFQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7Z0JBQzVGLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLFNBQVM7Z0JBQ2hDLGlCQUFpQixFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBVyxFQUFFLEtBQUs7Z0JBQ2hELHVCQUF1QixFQUFFLElBQUEsZ0NBQXNCLEVBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDO2dCQUMvRSxpQkFBaUIsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLGlCQUFpQjtnQkFDL0MsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCO2FBQ3BDO1lBQ0QsV0FBVyxFQUFFLENBQUMsV0FBVyxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsSUFBSSxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsaUJBQWlCLElBQUksRUFBRSxDQUFDLENBQUM7U0FDeEYsQ0FBQztLQUNIO0lBRU8sZUFBZTtRQUNyQixPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLFFBQVEsRUFBRSxJQUFJLEtBQUssbUJBQVUsQ0FBQyxHQUFHO1lBQ2hGLENBQUMsQ0FBQyxTQUFTO1lBQ1gsQ0FBQyxDQUFDLFNBQVMsQ0FBQztLQUNmOztBQTVDSCw0QkE2Q0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBpYW0gZnJvbSAnYXdzLWNkay1saWIvYXdzLWlhbSc7XG5pbXBvcnQgKiBhcyBmaXJlaG9zZSBmcm9tICdAYXdzLWNkay9hd3Mta2luZXNpc2ZpcmVob3NlLWFscGhhJztcbmltcG9ydCAqIGFzIHMzIGZyb20gJ2F3cy1jZGstbGliL2F3cy1zMyc7XG5pbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tICdjb25zdHJ1Y3RzJztcbmltcG9ydCB7IEJhY2t1cE1vZGUsIENvbW1vbkRlc3RpbmF0aW9uUHJvcHMsIENvbW1vbkRlc3RpbmF0aW9uUzNQcm9wcyB9IGZyb20gJy4vY29tbW9uJztcbmltcG9ydCB7IGNyZWF0ZUJhY2t1cENvbmZpZywgY3JlYXRlQnVmZmVyaW5nSGludHMsIGNyZWF0ZUVuY3J5cHRpb25Db25maWcsIGNyZWF0ZUxvZ2dpbmdPcHRpb25zLCBjcmVhdGVQcm9jZXNzaW5nQ29uZmlnIH0gZnJvbSAnLi9wcml2YXRlL2hlbHBlcnMnO1xuXG4vKipcbiAqIFByb3BzIGZvciBkZWZpbmluZyBhbiBTMyBkZXN0aW5hdGlvbiBvZiBhIEtpbmVzaXMgRGF0YSBGaXJlaG9zZSBkZWxpdmVyeSBzdHJlYW0uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUzNCdWNrZXRQcm9wcyBleHRlbmRzIENvbW1vbkRlc3RpbmF0aW9uUzNQcm9wcywgQ29tbW9uRGVzdGluYXRpb25Qcm9wcyB7XG59XG5cbi8qKlxuICogQW4gUzMgYnVja2V0IGRlc3RpbmF0aW9uIGZvciBkYXRhIGZyb20gYSBLaW5lc2lzIERhdGEgRmlyZWhvc2UgZGVsaXZlcnkgc3RyZWFtLlxuICovXG5leHBvcnQgY2xhc3MgUzNCdWNrZXQgaW1wbGVtZW50cyBmaXJlaG9zZS5JRGVzdGluYXRpb24ge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGJ1Y2tldDogczMuSUJ1Y2tldCwgcHJpdmF0ZSByZWFkb25seSBwcm9wczogUzNCdWNrZXRQcm9wcyA9IHt9KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuczNCYWNrdXA/Lm1vZGUgPT09IEJhY2t1cE1vZGUuRkFJTEVEKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1MzIGRlc3RpbmF0aW9ucyBkbyBub3Qgc3VwcG9ydCBCYWNrdXBNb2RlLkZBSUxFRCcpO1xuICAgIH1cbiAgfVxuXG4gIGJpbmQoc2NvcGU6IENvbnN0cnVjdCwgX29wdGlvbnM6IGZpcmVob3NlLkRlc3RpbmF0aW9uQmluZE9wdGlvbnMpOiBmaXJlaG9zZS5EZXN0aW5hdGlvbkNvbmZpZyB7XG4gICAgY29uc3Qgcm9sZSA9IHRoaXMucHJvcHMucm9sZSA/PyBuZXcgaWFtLlJvbGUoc2NvcGUsICdTMyBEZXN0aW5hdGlvbiBSb2xlJywge1xuICAgICAgYXNzdW1lZEJ5OiBuZXcgaWFtLlNlcnZpY2VQcmluY2lwYWwoJ2ZpcmVob3NlLmFtYXpvbmF3cy5jb20nKSxcbiAgICB9KTtcblxuICAgIGNvbnN0IGJ1Y2tldEdyYW50ID0gdGhpcy5idWNrZXQuZ3JhbnRSZWFkV3JpdGUocm9sZSk7XG5cbiAgICBjb25zdCB7IGxvZ2dpbmdPcHRpb25zLCBkZXBlbmRhYmxlczogbG9nZ2luZ0RlcGVuZGFibGVzIH0gPSBjcmVhdGVMb2dnaW5nT3B0aW9ucyhzY29wZSwge1xuICAgICAgbG9nZ2luZzogdGhpcy5wcm9wcy5sb2dnaW5nLFxuICAgICAgbG9nR3JvdXA6IHRoaXMucHJvcHMubG9nR3JvdXAsXG4gICAgICByb2xlLFxuICAgICAgc3RyZWFtSWQ6ICdTM0Rlc3RpbmF0aW9uJyxcbiAgICB9KSA/PyB7fTtcblxuICAgIGNvbnN0IHsgYmFja3VwQ29uZmlnLCBkZXBlbmRhYmxlczogYmFja3VwRGVwZW5kYWJsZXMgfSA9IGNyZWF0ZUJhY2t1cENvbmZpZyhzY29wZSwgcm9sZSwgdGhpcy5wcm9wcy5zM0JhY2t1cCkgPz8ge307XG4gICAgcmV0dXJuIHtcbiAgICAgIGV4dGVuZGVkUzNEZXN0aW5hdGlvbkNvbmZpZ3VyYXRpb246IHtcbiAgICAgICAgY2xvdWRXYXRjaExvZ2dpbmdPcHRpb25zOiBsb2dnaW5nT3B0aW9ucyxcbiAgICAgICAgcHJvY2Vzc2luZ0NvbmZpZ3VyYXRpb246IGNyZWF0ZVByb2Nlc3NpbmdDb25maWcoc2NvcGUsIHJvbGUsIHRoaXMucHJvcHMucHJvY2Vzc29yKSxcbiAgICAgICAgcm9sZUFybjogcm9sZS5yb2xlQXJuLFxuICAgICAgICBzM0JhY2t1cENvbmZpZ3VyYXRpb246IGJhY2t1cENvbmZpZyxcbiAgICAgICAgczNCYWNrdXBNb2RlOiB0aGlzLmdldFMzQmFja3VwTW9kZSgpLFxuICAgICAgICBidWZmZXJpbmdIaW50czogY3JlYXRlQnVmZmVyaW5nSGludHModGhpcy5wcm9wcy5idWZmZXJpbmdJbnRlcnZhbCwgdGhpcy5wcm9wcy5idWZmZXJpbmdTaXplKSxcbiAgICAgICAgYnVja2V0QXJuOiB0aGlzLmJ1Y2tldC5idWNrZXRBcm4sXG4gICAgICAgIGNvbXByZXNzaW9uRm9ybWF0OiB0aGlzLnByb3BzLmNvbXByZXNzaW9uPy52YWx1ZSxcbiAgICAgICAgZW5jcnlwdGlvbkNvbmZpZ3VyYXRpb246IGNyZWF0ZUVuY3J5cHRpb25Db25maWcocm9sZSwgdGhpcy5wcm9wcy5lbmNyeXB0aW9uS2V5KSxcbiAgICAgICAgZXJyb3JPdXRwdXRQcmVmaXg6IHRoaXMucHJvcHMuZXJyb3JPdXRwdXRQcmVmaXgsXG4gICAgICAgIHByZWZpeDogdGhpcy5wcm9wcy5kYXRhT3V0cHV0UHJlZml4LFxuICAgICAgfSxcbiAgICAgIGRlcGVuZGFibGVzOiBbYnVja2V0R3JhbnQsIC4uLihsb2dnaW5nRGVwZW5kYWJsZXMgPz8gW10pLCAuLi4oYmFja3VwRGVwZW5kYWJsZXMgPz8gW10pXSxcbiAgICB9O1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRTM0JhY2t1cE1vZGUoKTogc3RyaW5nIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5zM0JhY2t1cD8uYnVja2V0IHx8IHRoaXMucHJvcHMuczNCYWNrdXA/Lm1vZGUgPT09IEJhY2t1cE1vZGUuQUxMXG4gICAgICA/ICdFbmFibGVkJ1xuICAgICAgOiB1bmRlZmluZWQ7XG4gIH1cbn1cbiJdfQ==